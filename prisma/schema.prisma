generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Gem {
  id          String           @id @default(uuid())
  name        String
  description String?
  image       String?
  price       Decimal?
  stock       Int?
  material    String[]
  natural     Boolean
  shape       String
  texture     String
  colors      String[]
  weight      Decimal?
  quantity    Int?
  active      Boolean?
  dimensions  String?
  categoryId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    GemCategory?     @relation(fields: [categoryId], references: [id])
  jewelries   JewelryPosition?
}

model GemCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gems      Gem[]
}

model Pendant {
  id          String           @id @default(uuid())
  name        String
  description String?
  image       String?
  price       Decimal?
  stock       Int?
  material    String[]
  natural     Boolean
  shape       String
  texture     String
  colors      String[]
  weight      Decimal?
  quantity    Int?
  active      Boolean?
  dimensions  String?
  categoryId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  jewelries   JewelryPosition?
  category    PendantCategory? @relation(fields: [categoryId], references: [id])
}

model PendantCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pendants  Pendant[]
}

model Jewelry {
  id          String            @id @default(uuid())
  name        String?
  description String?
  status      String            @default("draft")
  shareLink   String?
  chainColor  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      Int
  positions   JewelryPosition[]
}

model JewelryPosition {
  id        String        @id @default(uuid())
  position  Int           @unique
  gemId     String?       @unique
  pendantId String?       @unique
  jewelryId String
  designId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  design    JewelryDesign @relation(fields: [designId], references: [id])
  gem       Gem?          @relation(fields: [gemId], references: [id])
  jewelry   Jewelry       @relation(fields: [jewelryId], references: [id])
  pendant   Pendant?      @relation(fields: [pendantId], references: [id])
}

model JewelryDesign {
  id          String            @id @default(uuid())
  name        String
  description String?
  chainColor  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      Int
  positions   JewelryPosition[]
}
